worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 2048;
}
#user root admin;
http {

# 设置默认 lua 搜索路径，添加 lua 路径
    lua_package_path 'lua/?.lua;/opt/openresty/nginx/lualib/;;';

    # 对于开发研究，可以对代码 cache 进行关闭，这样不必每次都重新加载 nginx。app envir must set #lua_code_cache on; 
    lua_code_cache on;
 
    lua_shared_dict ngx_cache 128m;
    
    lua_shared_dict chat_room 100m;
    

    lua_shared_dict my_locks 1m;

    #错误页面导航预定义 隐藏系统的环境
    error_page 400  /403.html;  #Bad Request/错误请求
    error_page 401  /403.html;  #Unauthorized/未授权
    error_page 403  /403.html;  #(Forbidden/禁止)
    error_page 404  /404.html;  #(Not Found/未找到)
    error_page 405  /405.html;       #405 (Method Not Allowed/方法未允许)(SC_METHOD_NOT_ALLOWED)指出请求方法(GET, 
                                        #POST, HEAD, PUT, DELETE, 等)对某些特定的资源不允许使用。该状态码是新加入 HTTP 1.1中的。 
   
    error_page 406  /406.html;  #406 (Not Acceptable/无法访问)
    error_page 407  /407.html;  #407 (Proxy Authentication Required/代理服务器认证要求)
    error_page 408  /408.html;  #408 (Request Timeout/请求超时)

    error_page 409 410 411 412 413 414 415 416 417 /40x.html; #详情见http状态

    #502 等错误可以用同样的方法来配置。  

    error_page  500 502 503 504  /50x.html; 



    #ngx.STDERR     -- 标准输出
    #ngx.EMERG      -- 紧急报错
    #ngx.ALERT      -- 报警
    #ngx.CRIT       -- 严重，系统故障，触发运维告警系统
    #ngx.ERR        -- 错误，业务不可恢复性错误
    #ngx.WARN       -- 告警，业务中可忽略错误
    #ngx.NOTICE     -- 提醒，业务比较重要信息
    #ngx.INFO       -- 信息，业务琐碎日志信息，包含不同情况判断等
    #ngx.DEBUG      -- 调试

    error_log  logs/error.log info;    # 日志级别

    # lua 初始化脚本
    init_by_lua_file 'lua/init/system_init.lua';
 
    init_worker_by_lua_file 'lua/chat_room/init_worker_by_lua.lua';

    #DNS解析服务器地址，用google的8.8.8.8有时候会访问不了，得益于某堵墙 
    resolver 114.114.114.114;

    server {
        #监听端口，若你的6677端口已经被占用，则需要修改
        listen 80; 
		

		
		
	   # 默认读取 body ------------------------------------
       #lua_need_request_body on;


    location / {

            #default_type text/html;
 		     # 指定对应uri的资源查找路径，这里html为相对路径，完整路径
	         #root /home/mac/06Temp/openresty_tutorial/openresty-test;
             root  E:/dzpk/04sourcecode/server/html;
          
	   }
    #配置Nginx动静分离，定义的静态页面直接从Nginx发布目录读取。
    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ 
    { 
         root  E:/dzpk/04sourcecode/server/html;
        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力
        expires      7d; 
    } 

 	location /upfile {
            content_by_lua_file lua/server_upload.lua;
        }

    location ~ ^/files/([-_a-zA-Z0-9/]+) {
            #rewrite_by_lua_file lua/files/common/file_redirect.lua;
            #access_by_lua_file  lua/files/common/file_access.lua;
            content_by_lua_file lua/files/$1.lua;

            
            #upload_resumable on; #开启断点续传功能;
            #upload_state_store upload_temp ; #设置断点续传状态文件存储的目录。 


            #log_by_lua lua/log.lua;
        }
     location ~ ^/download_internal/([-_a-zA-Z0-9/]+) {
                #internal;
                #send_timeout 10 s;
                #access_by_lua 'ngx.var.limit_rate = "300 K"'; 
                #access_by_lua_file lua/files/common/down_access.lua;
                chunked_transfer_encoding off;
                default_type application/octet-stream;
        }

# 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/([-_a-zA-Z0-9/]+) {

        add_header 'Access-Control-Allow-Origin' "*";
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  
          # 准入阶段完成参数验证
          #access_by_lua_file  lua/auth/token_auth.lua;

            #内容生成阶段
            content_by_lua_file lua/api/$1.lua;
        }


        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/chat_room/([-_a-zA-Z0-9/]+) {


        add_header 'Access-Control-Allow-Origin' "*";
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            #内容生成阶段
            content_by_lua_file lua/chat_room/$1.lua;
        }

	   location ~ ^/common/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            #access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/common/$1.lua;
        }

	   location ~ ^/game/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            #access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/game/$1.lua;
        }

        location ~ ^/netease/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            #access_by_lua_file  lua/access_check.lua;
		add_header 'Access-Control-Allow-Origin' "*";
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            #内容生成阶段
            content_by_lua_file lua/netease/$1.lua;
        }
        

        location /start {
            content_by_lua '
                local session = require "resty.session".start()
                session.data.name = "OpenResty Fan"
                session:save()
                ngx.say("session name :"..session.data.name )
                ngx.say("<html><body>Session started. ",
                        "<a href=/test>Check if it is working</a>!</body></html>")
            ';
        }
        location /test {
            content_by_lua '
                local session = require "resty.session".open()
                --ngx.say("session name :"..session.data.name )
                ngx.say("<html><body>Session was started by <strong>",
                        session.data.name or "Anonymous",
                        "</strong>! <a href=/destroy>Destroy the session</a>.</body></html>")
            ';
        }
        location /destroy {
            content_by_lua '
                local session = require "resty.session".start()
                session:destroy()
                ngx.say("<html><body>Session was destroyed. ",
                        "<a href=/check>Is it really so</a>?</body></html>")
            ';
        }
        location /check {
            content_by_lua '
                local session = require "resty.session".open()
                ngx.say("<html><body>Session was really destroyed, you are known as ",
                        "<strong>",
                        session.data.name or "Anonymous",
                        "</strong>! <a href=/>Start again</a>.</body></html>")
            ';
        }       

    }


#server { 
# listen      443; 
# server_name  127.0.0.1;
# 
# #为一个server开启ssl支持
# ssl                  on;
#
# ssl_session_cache    shared:SSL:1m; #s储存SSL会话的缓存类型和大小                        
# ssl_session_timeout  5m; #会话过期时间      
#
#
#  #为虚拟主机指定pem格式的证书文件
# ssl_certificate      example_com.crt; 
# #为虚拟主机指定私钥文件
# ssl_certificate_key  example_com.key; 
# #客户端能够重复使用存储在缓存中的会话参数时间
# #ssl_session_timeout  5m;
# #指定使用的ssl协议 
# #ssl_protocols  SSLv3 TLSv1; 
# #指定许可的密码描述
# #ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; 
# #SSLv3和TLSv1协议的服务器密码需求优先级高于客户端密码
# #ssl_prefer_server_ciphers  on;
#
# location / { 
#  root  /Users/mac/Desktop/workspace/openresty_server/MemoriesOfTime/04sourcecode/server/html;
#         
# } 
#     # redirect server error pages to the static page /50x.html
#     #
#     error_page  500 502 503 504  /50x.html;
#     error_page  404 /404.html;
#
# location = /50x.html {
#         root  /Users/mac/Desktop/workspace/openresty_server/MemoriesOfTime/04sourcecode/server/html;
#     }
#   location = /404.html {
#         root  /Users/mac/Desktop/workspace/openresty_server/MemoriesOfTime/04sourcecode/server/html;
#     } 
#}



}
